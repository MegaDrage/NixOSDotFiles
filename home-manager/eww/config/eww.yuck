(defwindow networkmenu
            :monitor 0
            :geometry (geometry :x "0%"
                        :y "20px"
                        :width "30%"
                        :height "30%"
                        :anchor "top right")
            :stacking "overlay"
            :windowtype "dialog"
            ; :focusable true
    (networkmenu_layout))

    (defpoll network_info :interval "5s"
        :initial 'N/A'
        `nmcli -t -f SIGNAL,ACTIVE device wifi \
        | awk -F':' '{if($2=="yes")print$1}'`)
    
    (defpoll network_name_info :interval "5s"
        :initial 'N/A'
        `nmcli -t -f active,ssid dev wifi \
        | awk -F':' '{if($1=="yes")print$2}'`)

    (defwidget networkmenu_layout []
        (box :class "layout-box" :space-evenly false :orientation "vertical"
          (box :halign "end" :valign "start" :space-evenly false :spacing 25
            (_network_name :name network_name_info)
            (label :text "|" :class "sep")
            (_network :strength network_info :offline "󰣽" :excellent "󰣺" :good "󰣸"
            :okay "󰣶" :slow "󰣴")
            (button :onclick "eww close networkmenu" :class "close-btn" "󰅙"))
           (box :space-evenly false :hexpand true :vexpand true 
            (button :onclick "eww open networks" :class "open-btn" "󰤄"))))
            

    (defwidget _network [strength offline excellent
                good okay slow]
        (box :class "net-box"
        :space-evenly false
        :spacing 8
        (label :text {strength == "" ? offline :
        strength < 26 ? slow :
            strength < 51 ? okay :
            strength < 76 ? good : excellent})))
    
    (defwidget _network_name [name]
        (box :class "net-name-box"
        :space-evenly false
        :spacing 25
        (label :text {name == "" ? "Wifi: N/A" : "Wifi: ${name}"})))
    

    (defwindow networks
        :monitor 0
        :geometry (geometry :x "30%"
                    :y "20px"
                    :width "30%"
                    :height "30%"
                    :anchor "top center")
        :stacking "overlay"
        :windowtype "dialog"
    (_networks_layout))

    (defwidget _networks_layout []
        (box :class "layout-box" :space-evenly false :orientation "horizontal"
            (box :halign "center" :valign "start" :space-evenly false :spacing 25
                (_available_networks))
            (box :halign "end" :valign "start" :space-evenly false :spacing 25
                (button :onclick "eww close networks" :class "close-btn" "󰅙"))))
        ; (box :class "layout-box" :space-evenly false :orientation "vertical"
        ;     (box :halign "start" :valign "start" :space-evenly false :spacing 25
        ;         (button :onclick "" :class "open-btn" "󰤄"))))


    (defwidget _available_networks []
        (box :class "net-av-box"
        :space-evenly false
        :spacing 25
        (label :text "Available Networks:")))
    